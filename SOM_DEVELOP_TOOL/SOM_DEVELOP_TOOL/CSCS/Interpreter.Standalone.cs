using CSCSMath;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Drawing.Imaging;

namespace SplitAndMerge
{
    public partial class Interpreter
    {
        public void InitStandalone(string[] FunctionList= null)
        {
            //for(int i=0;i<FunctionList.Length;i++)
            //{
            //    RegisterFunction(FunctionList[i], new APIFunction());
            //}

            RegisterFunction(Constants.GOTO, new GotoGosubFunction(true));
            RegisterFunction(Constants.GOSUB, new GotoGosubFunction(false));

            AddAction(Constants.LABEL_OPERATOR, new LabelFunction());
            AddAction(Constants.POINTER, new PointerFunction());
            AddAction(Constants.POINTER_REF, new PointerReferenceFunction());

#if UNITY_EDITOR == false && UNITY_STANDALONE == false
            //ParserFunction.CleanUp();
            RegisterFunction(Constants.APPEND, new AppendFunction());
            RegisterFunction(Constants.APPENDLINE, new AppendLineFunction());
            RegisterFunction(Constants.APPENDLINES, new AppendLinesFunction());
            RegisterFunction(Constants.OpenJlink, new OpenJlinkFunction());
            RegisterFunction(Constants.Reset, new ResetFunction());
            RegisterFunction(Constants.ArrayToString, new ArrayToStringFunction());
            RegisterFunction(Constants.JlinkOpReadU8, new JlinkOpFunction());
            RegisterFunction(Constants.JlinkOpReadU32, new JlinkOpFunction());
            RegisterFunction(Constants.JlinkOpWriteU8, new JlinkOpFunction());
            RegisterFunction(Constants.JlinkOpWriteU32, new JlinkOpFunction());
           
            RegisterFunction(Constants.InitJlinkProctol, new InitJlinkProctolFunction());
            RegisterFunction(Constants.OpenFile, new OpenFileFunction());
            RegisterFunction(Constants.GetFile, new GetFileFunction());

            RegisterFunction(Constants.FileWrite, new FileWriteFunction());
            RegisterFunction(Constants.FileRead, new FileReadFunction());
            RegisterFunction(Constants.FileReadAllLine, new FileReadAllLineFunction());
            RegisterFunction(Constants.ReadMultmeter, new ReadMultmeterFunction());
            //RegisterFunction(Constants.InitInterface, new InitInterfaceFunction());
            //RegisterFunction(Constants.som_xspi_reg_write, new som_xspi_reg_writeFunction());
            //RegisterFunction(Constants.som_xspi_reg_read, new som_xspi_reg_readFunction());
            //RegisterFunction(Constants.som_xspi_reg_reram_write, new som_xspi_reg_reram_writeFunction());
            //RegisterFunction(Constants.som_xspi_reg_reram_read, new som_xspi_reg_reram_readFunction());
            //RegisterFunction(Constants.som_xspi_reram_write, new som_xspi_reram_writeFunction());
            //RegisterFunction(Constants.som_xspi_reram_read, new som_xspi_reram_readFunction());
            //RegisterFunction(Constants.som_common_test, new som_common_testFunction());
            RegisterFunction(Constants.CallAPI, new CallAPIFunction());
            RegisterFunction(Constants.GetRandom, new GetRandomFunction());
            RegisterFunction(Constants.Wilf, new WilfFunction());
            RegisterFunction(Constants.CALL_NATIVE, new InvokeNativeFunction());
            RegisterFunction(Constants.CD, new CdFunction());
            RegisterFunction(Constants.CD__, new Cd__Function());
            RegisterFunction(Constants.CONNECTSRV, new ClientSocket());
            RegisterFunction(Constants.COPY, new CopyFunction());
            RegisterFunction(Constants.DELETE, new DeleteFunction());
            RegisterFunction(Constants.DIR, new DirFunction());
            RegisterFunction(Constants.EXISTS, new ExistsFunction());
            RegisterFunction(Constants.EXIT, new ExitFunction());
            RegisterFunction(Constants.FINDFILES, new FindfilesFunction());
            RegisterFunction(Constants.FINDSTR, new FindstrFunction());
            RegisterFunction(Constants.GET_NATIVE, new GetNativeFunction());
            RegisterFunction(Constants.KILL, new KillFunction());
            RegisterFunction(Constants.MKDIR, new MkdirFunction());
            RegisterFunction(Constants.MORE, new MoreFunction());
            RegisterFunction(Constants.MOVE, new MoveFunction());
            RegisterFunction(Constants.PSINFO, new PsInfoFunction());
            RegisterFunction(Constants.PWD, new PwdFunction());
            RegisterFunction(Constants.READFILE, new ReadCSCSFileFunction());
            RegisterFunction(Constants.RUN, new RunFunction());
            RegisterFunction(Constants.SET_NATIVE, new SetNativeFunction());
            RegisterFunction(Constants.STARTSRV, new ServerSocket());
            RegisterFunction(Constants.STOPWATCH_ELAPSED, new StopWatchFunction(StopWatchFunction.Mode.ELAPSED));
            RegisterFunction(Constants.STOPWATCH_START, new StopWatchFunction(StopWatchFunction.Mode.START));
            RegisterFunction(Constants.STOPWATCH_STOP, new StopWatchFunction(StopWatchFunction.Mode.STOP));
            RegisterFunction(Constants.TAIL, new TailFunction());
            RegisterFunction(Constants.TIMESTAMP, new TimestampFunction());
            RegisterFunction(Constants.WRITE, new PrintFunction(false));
            RegisterFunction(Constants.WRITELINE, new WriteLineFunction());
            RegisterFunction(Constants.WRITELINES, new WriteLinesFunction());
            RegisterFunction(Constants.WRITE_CONSOLE, new WriteToConsole());

#if __ANDROID__ == false && __IOS__ == false
            RegisterFunction(Constants.ADD_COMP_DEFINITION, new EditCompiledEntry(EditCompiledEntry.EditMode.ADD_DEFINITION));
            RegisterFunction(Constants.ADD_COMP_NAMESPACE, new EditCompiledEntry(EditCompiledEntry.EditMode.ADD_NAMESPACE));
            RegisterFunction(Constants.CLEAR_COMP_DEFINITIONS, new EditCompiledEntry(EditCompiledEntry.EditMode.CLEAR_DEFINITIONS));
            RegisterFunction(Constants.CLEAR_COMP_NAMESPACES, new EditCompiledEntry(EditCompiledEntry.EditMode.CLEAR_NAMESPACES));
            RegisterFunction(Constants.CSHARP_FUNCTION, new CompiledFunctionCreator(true));

            RegisterFunction(Constants.DLL_FUNCTION, new DLLCreator(true));
            RegisterFunction(Constants.IMPORT_DLL, new ImportDLLFunction(false));
            RegisterFunction(Constants.INVOKE_DLL, new ImportDLLFunction(true));

            RegisterFunction(Constants.CONSOLE_CLR, new ClearConsole());
            RegisterFunction(Constants.PRINT_BLACK, new PrintColorFunction(ConsoleColor.Black));
            RegisterFunction(Constants.PRINT_GRAY, new PrintColorFunction(ConsoleColor.DarkGray));
            RegisterFunction(Constants.PRINT_GREEN, new PrintColorFunction(ConsoleColor.Green));
            RegisterFunction(Constants.PRINT_RED, new PrintColorFunction(ConsoleColor.Red));
            RegisterFunction(Constants.READ, new ReadConsole());
            RegisterFunction(Constants.READNUMBER, new ReadConsole(true));
            RegisterFunction(Constants.TRANSLATE, new TranslateFunction());

            RegisterFunction(Constants.ENCODE_FILE, new EncodeFileFunction(true));
            RegisterFunction(Constants.DECODE_FILE, new EncodeFileFunction(false));

#endif
#endif
            //ReadConfig();

            
RegisterFunction(Constants.__semihosting_library_function, new APIFunction());
RegisterFunction(Constants.GetCrc32, new APIFunction());
RegisterFunction(Constants.exit, new APIFunction());
RegisterFunction(Constants.SysTick_Handler, new APIFunction());
RegisterFunction(Constants.__scatterload_zeroinit, new APIFunction());
RegisterFunction(Constants.__use_two_region_memory, new APIFunction());
RegisterFunction(Constants.am_adc_isr, new APIFunction());
RegisterFunction(Constants.am_stimer_cmpr6_isr, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_interrupt_status_get, new APIFunction());
RegisterFunction(Constants.myShellWrite, new APIFunction());
RegisterFunction(Constants.som_xspi_mem_write, new APIFunction());
RegisterFunction(Constants.socInit, new APIFunction());
RegisterFunction(Constants.am_hal_cmdq_init, new APIFunction());
RegisterFunction(Constants.BusFault_Handler, new APIFunction());
RegisterFunction(Constants.am_hal_gpio_state_write, new APIFunction());
RegisterFunction(Constants.DebugMon_Handler, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_user_alloc_1, new APIFunction());
RegisterFunction(Constants.am_iomaster3_isr, new APIFunction());
RegisterFunction(Constants.am_device_mspi_som_reg_read, new APIFunction());
RegisterFunction(Constants.am_timer09_isr, new APIFunction());
RegisterFunction(Constants.am_iomaster6_isr, new APIFunction());
RegisterFunction(Constants.am_device_command_read, new APIFunction());
RegisterFunction(Constants.SVC_Handler, new APIFunction());
RegisterFunction(Constants.JlinkInit, new APIFunction());
RegisterFunction(Constants.daxi_flush_complete, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_initialize, new APIFunction());
RegisterFunction(Constants.crypto_quiesce, new APIFunction());
RegisterFunction(Constants.mspi_device_configure, new APIFunction());
RegisterFunction(Constants.am_dspi2s1_isr, new APIFunction());
RegisterFunction(Constants.__fplib_config_fpu_vfp, new APIFunction());
RegisterFunction(Constants.am_timer06_isr, new APIFunction());
RegisterFunction(Constants.am_dspi2s2_isr, new APIFunction());
RegisterFunction(Constants.strcmp, new APIFunction());
RegisterFunction(Constants.shellDisplayByte, new APIFunction());
RegisterFunction(Constants.som_module_init, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_lc_common, new APIFunction());
RegisterFunction(Constants.__rt_lib_shutdown_user_alloc_1, new APIFunction());
RegisterFunction(Constants.__rt_lib_shutdown_fp_trap_1, new APIFunction());
RegisterFunction(Constants.shell_show_help, new APIFunction());
RegisterFunction(Constants.am_uart_isr, new APIFunction());
RegisterFunction(Constants.strlen, new APIFunction());
RegisterFunction(Constants.shell_clear, new APIFunction());
RegisterFunction(Constants.__scatterload_null, new APIFunction());
RegisterFunction(Constants.am_timer00_isr, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_interrupt_clear, new APIFunction());
RegisterFunction(Constants.__rt_entry_presh_1, new APIFunction());
RegisterFunction(Constants.am_hal_pwrctrl_periph_disable, new APIFunction());
RegisterFunction(Constants.shell_display_item, new APIFunction());
RegisterFunction(Constants.am_hal_cachectrl_config, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_alloca_1, new APIFunction());
RegisterFunction(Constants.am_timer10_isr, new APIFunction());
RegisterFunction(Constants.uint64_to_str, new APIFunction());
RegisterFunction(Constants.am_hal_gpio_pinconfig, new APIFunction());
RegisterFunction(Constants.am_pdm3_isr, new APIFunction());
RegisterFunction(Constants.shell_clear_line, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_control, new APIFunction());
RegisterFunction(Constants._memcpy_lastbytes_aligned, new APIFunction());
RegisterFunction(Constants.__use_no_semihosting_swi, new APIFunction());
RegisterFunction(Constants.mspi_fifo_write, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_power_control, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_clock_1, new APIFunction());
RegisterFunction(Constants.ndigits_in_i64, new APIFunction());
RegisterFunction(Constants.am_dspi2s3_isr, new APIFunction());
RegisterFunction(Constants.NMI_Handler, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_lc_ctype_1, new APIFunction());
RegisterFunction(Constants.__aeabi_memclr8, new APIFunction());
RegisterFunction(Constants.am_mspi1_isr, new APIFunction());
RegisterFunction(Constants.am_hal_interrupt_master_set, new APIFunction());
RegisterFunction(Constants.som_write, new APIFunction());
RegisterFunction(Constants.am_gpu_isr, new APIFunction());
RegisterFunction(Constants.shell_handler, new APIFunction());
RegisterFunction(Constants.am_devices_mspi_som_deinit, new APIFunction());
RegisterFunction(Constants.am_hal_delay_us_status_change, new APIFunction());
RegisterFunction(Constants.__rt_entry_postli_1, new APIFunction());
RegisterFunction(Constants.am_timer04_isr, new APIFunction());
RegisterFunction(Constants.mspi_cq_term, new APIFunction());
RegisterFunction(Constants.am_hal_cmdq_get_status, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_interrupt_disable, new APIFunction());
RegisterFunction(Constants.som_readUID, new APIFunction());
RegisterFunction(Constants.__fpl_fretinf, new APIFunction());
RegisterFunction(Constants.shell_normal, new APIFunction());
RegisterFunction(Constants.__rt_lib_shutdown_return, new APIFunction());
RegisterFunction(Constants.am_gpio1_203f_isr, new APIFunction());
RegisterFunction(Constants.rx_queue_update, new APIFunction());
RegisterFunction(Constants.mspi_add_hp_transaction, new APIFunction());
RegisterFunction(Constants.am_hal_uart_power_control, new APIFunction());
RegisterFunction(Constants.__aeabi_memclr, new APIFunction());
RegisterFunction(Constants.am_gpio0_607f_isr, new APIFunction());
RegisterFunction(Constants.__rt_entry_li, new APIFunction());
RegisterFunction(Constants.shell_backspace_key_process, new APIFunction());
RegisterFunction(Constants.mspi_cq_disable, new APIFunction());
RegisterFunction(Constants.am_timer01_isr, new APIFunction());
RegisterFunction(Constants._d2f, new APIFunction());
RegisterFunction(Constants.am_hal_cmdq_term, new APIFunction());
RegisterFunction(Constants.uint64_to_hexstr, new APIFunction());
RegisterFunction(Constants.tx_queue_update, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_deinitialize, new APIFunction());
RegisterFunction(Constants.am_timer11_isr, new APIFunction());
RegisterFunction(Constants.am_stimer_cmpr4_isr, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_enable, new APIFunction());
RegisterFunction(Constants.__rt_lib_shutdown_cpp_1, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_fp_1, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_interrupt_service, new APIFunction());
RegisterFunction(Constants.am_stimer_cmpr0_isr, new APIFunction());
RegisterFunction(Constants._fp_init, new APIFunction());
RegisterFunction(Constants.divu64_10, new APIFunction());
RegisterFunction(Constants.ndigits_in_u64, new APIFunction());
RegisterFunction(Constants.sys_init, new APIFunction());
RegisterFunction(Constants.decstr_to_int, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_stdio_1, new APIFunction());
RegisterFunction(Constants.nonblocking_read, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_lc_collate_1, new APIFunction());
RegisterFunction(Constants.som_xspi_reg_write, new APIFunction());
RegisterFunction(Constants.am_devices_mspi_som_init, new APIFunction());
RegisterFunction(Constants.__aeabi_d2f, new APIFunction());
RegisterFunction(Constants.__rt_exit_ls, new APIFunction());
RegisterFunction(Constants.som_xspi_mem_read_xip, new APIFunction());
RegisterFunction(Constants.am_disp_isr, new APIFunction());
RegisterFunction(Constants.__rt_entry, new APIFunction());
RegisterFunction(Constants.am_default_isr, new APIFunction());
RegisterFunction(Constants.mspi_fifo_read, new APIFunction());
RegisterFunction(Constants.am_uart1_isr, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_getenv_1, new APIFunction());
RegisterFunction(Constants.am_device_command_write, new APIFunction());
RegisterFunction(Constants.som_xspi_resetCtrl, new APIFunction());
RegisterFunction(Constants.__scatterload_copy, new APIFunction());
RegisterFunction(Constants.am_sdio_isr, new APIFunction());
RegisterFunction(Constants.ResetCrc32, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_fp_trap_1, new APIFunction());
RegisterFunction(Constants.simple_strlen, new APIFunction());
RegisterFunction(Constants.am_audadc0_isr, new APIFunction());
RegisterFunction(Constants.am_hal_interrupt_master_enable, new APIFunction());
RegisterFunction(Constants.am_gpio0_001f_isr, new APIFunction());
RegisterFunction(Constants.main, new APIFunction());
RegisterFunction(Constants.shell_history_add, new APIFunction());
RegisterFunction(Constants.main_shell, new APIFunction());
RegisterFunction(Constants.shell_get_current, new APIFunction());
RegisterFunction(Constants.am_iomaster4_isr, new APIFunction());
RegisterFunction(Constants.shell_enter_key_process, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_heap_1, new APIFunction());
RegisterFunction(Constants.am_timer05_isr, new APIFunction());
RegisterFunction(Constants.am_dsi_isr, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_return, new APIFunction());
RegisterFunction(Constants.som_module_init_test, new APIFunction());
RegisterFunction(Constants.shell_task, new APIFunction());
RegisterFunction(Constants.FillFrame, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_blocking_transfer, new APIFunction());
RegisterFunction(Constants.__scatterload_rt2, new APIFunction());
RegisterFunction(Constants.am_device_mspi_som_reg_write, new APIFunction());
RegisterFunction(Constants.am_hal_pwrctrl_periph_enable, new APIFunction());
RegisterFunction(Constants.am_timer13_isr, new APIFunction());
RegisterFunction(Constants.blocking_write, new APIFunction());
RegisterFunction(Constants.am_hal_fault_status_get, new APIFunction());
RegisterFunction(Constants.am_bsp_mspi1_mux_flash_enable, new APIFunction());
RegisterFunction(Constants.am_cachecpu_isr, new APIFunction());
RegisterFunction(Constants.reConfigTurnaround, new APIFunction());
RegisterFunction(Constants.__main, new APIFunction());
RegisterFunction(Constants.am_ctimer_isr, new APIFunction());
RegisterFunction(Constants._rand_init, new APIFunction());
RegisterFunction(Constants.am_hal_fault_capture_enable, new APIFunction());
RegisterFunction(Constants.__user_perthread_libspace, new APIFunction());
RegisterFunction(Constants.som_memoryOT, new APIFunction());
RegisterFunction(Constants.am_bsp_mspi1_mux_psram_enable, new APIFunction());
RegisterFunction(Constants.atoi, new APIFunction());
RegisterFunction(Constants.__decompress, new APIFunction());
RegisterFunction(Constants.am_stimer_cmpr2_isr, new APIFunction());
RegisterFunction(Constants.am_hal_cachectrl_enable, new APIFunction());
RegisterFunction(Constants.am_stimer_cmpr7_isr, new APIFunction());
RegisterFunction(Constants.__rt_memclr_w, new APIFunction());
RegisterFunction(Constants.am_util_stdio_vsprintf, new APIFunction());
RegisterFunction(Constants.am_devices_mspi_som_ddr_disable_xip, new APIFunction());
RegisterFunction(Constants.am_usb_isr, new APIFunction());
RegisterFunction(Constants.am_stimer_cmpr5_isr, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_configure, new APIFunction());
RegisterFunction(Constants.am_devices_mspi_som_softReset, new APIFunction());
RegisterFunction(Constants.shell_init_fn, new APIFunction());
RegisterFunction(Constants.som_read_by_xip, new APIFunction());
RegisterFunction(Constants.write_transaction_save, new APIFunction());
RegisterFunction(Constants.shell_string_copy, new APIFunction());
RegisterFunction(Constants._strtoul, new APIFunction());
RegisterFunction(Constants.__user_initial_stackheap, new APIFunction());
RegisterFunction(Constants._memcpy_lastbytes, new APIFunction());
RegisterFunction(Constants.__rt_memcpy_w, new APIFunction());
RegisterFunction(Constants.Reset_Handler, new APIFunction());
RegisterFunction(Constants.mspi_dummy_callback, new APIFunction());
RegisterFunction(Constants.__scatterload, new APIFunction());
RegisterFunction(Constants.am_cryptosec_isr, new APIFunction());
RegisterFunction(Constants.shell_string_compare, new APIFunction());
RegisterFunction(Constants.shell_history_process, new APIFunction());
RegisterFunction(Constants.am_dspi2s0_isr, new APIFunction());
RegisterFunction(Constants.am_util_stdio_terminal_clear, new APIFunction());
RegisterFunction(Constants.am_watchdog_isr, new APIFunction());
RegisterFunction(Constants.am_hal_cmdq_post_loop_block, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_rand_2, new APIFunction());
RegisterFunction(Constants.nonblocking_read_sm, new APIFunction());
RegisterFunction(Constants.am_util_delay_ms, new APIFunction());
RegisterFunction(Constants.main_jlink, new APIFunction());
RegisterFunction(Constants.shell_help, new APIFunction());
RegisterFunction(Constants.param_parser, new APIFunction());
RegisterFunction(Constants.som_xspi_init, new APIFunction());
RegisterFunction(Constants.am_bsp_uart_string_print, new APIFunction());
RegisterFunction(Constants.__rt_entry_main, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_signal_1, new APIFunction());
RegisterFunction(Constants.__aeabi_memcpy8, new APIFunction());
RegisterFunction(Constants.am_rtc_isr, new APIFunction());
RegisterFunction(Constants.shell_ansi_process, new APIFunction());
RegisterFunction(Constants.shell_ansi_enter, new APIFunction());
RegisterFunction(Constants.som_RegWrite, new APIFunction());
RegisterFunction(Constants.getchar_custom, new APIFunction());
RegisterFunction(Constants.am_gpio1_607f_isr, new APIFunction());
RegisterFunction(Constants.daxi_flush_invalidate, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_lc_ctype_2, new APIFunction());
RegisterFunction(Constants.strtoul, new APIFunction());
RegisterFunction(Constants.__rt_entry_postsh_1, new APIFunction());
RegisterFunction(Constants.memcmp, new APIFunction());
RegisterFunction(Constants.__aeabi_memcpy, new APIFunction());
RegisterFunction(Constants.am_hal_uart_fifo_write, new APIFunction());
RegisterFunction(Constants.am_hal_uart_initialize, new APIFunction());
RegisterFunction(Constants.__rt_exit, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_disable, new APIFunction());
RegisterFunction(Constants.__rt_lib_init, new APIFunction());
RegisterFunction(Constants.shell_display_command_help, new APIFunction());
RegisterFunction(Constants.__rt_locale, new APIFunction());
RegisterFunction(Constants.am_timer15_isr, new APIFunction());
RegisterFunction(Constants.am_hal_queue_item_get, new APIFunction());
RegisterFunction(Constants.som_xspi_reg_read, new APIFunction());
RegisterFunction(Constants.padbuffer, new APIFunction());
RegisterFunction(Constants.am_uart2_isr, new APIFunction());
RegisterFunction(Constants.am_hal_cmdq_release_block, new APIFunction());
RegisterFunction(Constants.rand, new APIFunction());
RegisterFunction(Constants.am_devices_mspi_som_reset, new APIFunction());
RegisterFunction(Constants.am_hal_interrupt_master_disable, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_cpp_1, new APIFunction());
RegisterFunction(Constants.am_devices_mspi_som_ddr_write, new APIFunction());
RegisterFunction(Constants.am_hal_cmdq_error_resume, new APIFunction());
RegisterFunction(Constants.__rt_lib_shutdown_heap_1, new APIFunction());
RegisterFunction(Constants.am_hal_daxi_config, new APIFunction());
RegisterFunction(Constants.am_util_stdio_printf, new APIFunction());
RegisterFunction(Constants.__scatterload_rt2_thumb_only, new APIFunction());
RegisterFunction(Constants.som_read, new APIFunction());
RegisterFunction(Constants.__fplib_config_pureend_doubles, new APIFunction());
RegisterFunction(Constants.ProgramFlashPro, new APIFunction());
RegisterFunction(Constants.am_uart3_isr, new APIFunction());
RegisterFunction(Constants.update_indices, new APIFunction());
RegisterFunction(Constants.am_hal_queue_item_add, new APIFunction());
RegisterFunction(Constants.am_ioslave_ios_isr, new APIFunction());
RegisterFunction(Constants.som_nonblocking_transfer, new APIFunction());
RegisterFunction(Constants.am_iomaster1_isr, new APIFunction());
RegisterFunction(Constants.am_hal_daxi_control, new APIFunction());
RegisterFunction(Constants.getStackedReg, new APIFunction());
RegisterFunction(Constants.am_brownout_isr, new APIFunction());
RegisterFunction(Constants.am_gpio0_405f_isr, new APIFunction());
RegisterFunction(Constants.PendSV_Handler, new APIFunction());
RegisterFunction(Constants.__user_setup_stackheap, new APIFunction());
RegisterFunction(Constants.am_gpio1_001f_isr, new APIFunction());
RegisterFunction(Constants.__rt_exit_exit, new APIFunction());
RegisterFunction(Constants.crypto_boost_trims, new APIFunction());
RegisterFunction(Constants.mspi_piomixed_configure, new APIFunction());
RegisterFunction(Constants.am_clkgen_isr, new APIFunction());
RegisterFunction(Constants.am_iomaster2_isr, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_lc_time_1, new APIFunction());
RegisterFunction(Constants.am_hal_delay_us, new APIFunction());
RegisterFunction(Constants.mspi_cq_add_transaction, new APIFunction());
RegisterFunction(Constants.__aeabi_errno_addr, new APIFunction());
RegisterFunction(Constants.am_util_delay_us, new APIFunction());
RegisterFunction(Constants.am_stimer_cmpr3_isr, new APIFunction());
RegisterFunction(Constants.am_util_stdio_printf_init, new APIFunction());
RegisterFunction(Constants.am_device_mspi_som_exit_regReadMode, new APIFunction());
RegisterFunction(Constants.MemoryPro, new APIFunction());
RegisterFunction(Constants.am_iomaster7_isr, new APIFunction());
RegisterFunction(Constants.am_stimer_cmpr1_isr, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_nonblocking_transfer, new APIFunction());
RegisterFunction(Constants.shell_add, new APIFunction());
RegisterFunction(Constants.am_timer03_isr, new APIFunction());
RegisterFunction(Constants.som_xspi_mem_read, new APIFunction());
RegisterFunction(Constants.am_timer14_isr, new APIFunction());
RegisterFunction(Constants.am_hal_cmdq_reset, new APIFunction());
RegisterFunction(Constants.am_pdm2_isr, new APIFunction());
RegisterFunction(Constants.som_common_test, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_device_configure, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_rand_1, new APIFunction());
RegisterFunction(Constants.__rt_exit_prels_1, new APIFunction());
RegisterFunction(Constants.strncpy, new APIFunction());
RegisterFunction(Constants.pfnMSPI_SOM_DDR_Callback, new APIFunction());
RegisterFunction(Constants.am_mspi2_isr, new APIFunction());
RegisterFunction(Constants.som_init, new APIFunction());
RegisterFunction(Constants.__rt_lib_shutdown_stdio_1, new APIFunction());
RegisterFunction(Constants.nonblocking_write_sm, new APIFunction());
RegisterFunction(Constants.am_hal_uart_transfer, new APIFunction());
RegisterFunction(Constants.am_hal_uart_interrupt_clear, new APIFunction());
RegisterFunction(Constants.am_stimerof_isr, new APIFunction());
RegisterFunction(Constants.init_process, new APIFunction());
RegisterFunction(Constants.__user_perproc_libspace, new APIFunction());
RegisterFunction(Constants.__rt_memclr, new APIFunction());
RegisterFunction(Constants.am_hal_uart_configure, new APIFunction());
RegisterFunction(Constants.am_hal_mram_main_program, new APIFunction());
RegisterFunction(Constants.am_hal_cmdq_post_block, new APIFunction());
RegisterFunction(Constants.ftoa, new APIFunction());
RegisterFunction(Constants.som_xspi_uid_read, new APIFunction());
RegisterFunction(Constants.shell_get_subcmd_number, new APIFunction());
RegisterFunction(Constants.HardFault_Handler, new APIFunction());
RegisterFunction(Constants.am_hal_cmdq_disable, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_argv_1, new APIFunction());
RegisterFunction(Constants.som_reset, new APIFunction());
RegisterFunction(Constants.shell_delete, new APIFunction());
RegisterFunction(Constants.mspi_seq_loopback, new APIFunction());
RegisterFunction(Constants.am_util_faultisr_collect_data, new APIFunction());
RegisterFunction(Constants._get_lc_ctype, new APIFunction());
RegisterFunction(Constants.myShellRead, new APIFunction());
RegisterFunction(Constants.am_vcomp_isr, new APIFunction());
RegisterFunction(Constants.Crc32InitTable, new APIFunction());
RegisterFunction(Constants.am_hal_mram_main_words_program, new APIFunction());
RegisterFunction(Constants.read_transaction_save, new APIFunction());
RegisterFunction(Constants.am_hal_cmdq_enable, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_highprio_transfer, new APIFunction());
RegisterFunction(Constants.am_mspi0_isr, new APIFunction());
RegisterFunction(Constants.am_bsp_uart_printf_enable, new APIFunction());
RegisterFunction(Constants.am_timer07_isr, new APIFunction());
RegisterFunction(Constants.mspi_cq_init, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_preinit_1, new APIFunction());
RegisterFunction(Constants.ExeTestCase, new APIFunction());
RegisterFunction(Constants.__rt_ctype_table, new APIFunction());
RegisterFunction(Constants.mspi_cq_pause, new APIFunction());
RegisterFunction(Constants._memset, new APIFunction());
RegisterFunction(Constants._memset_w, new APIFunction());
RegisterFunction(Constants.am_devices_mspi_som_ddr_enable_xip, new APIFunction());
RegisterFunction(Constants.__fpl_dnaninf, new APIFunction());
RegisterFunction(Constants.am_hal_cmdq_alloc_block, new APIFunction());
RegisterFunction(Constants.__user_libspace, new APIFunction());
RegisterFunction(Constants.__rt_entry_sh, new APIFunction());
RegisterFunction(Constants.get_pause_val, new APIFunction());
RegisterFunction(Constants.MemManage_Handler, new APIFunction());
RegisterFunction(Constants.strtol, new APIFunction());
RegisterFunction(Constants.srand, new APIFunction());
RegisterFunction(Constants._sys_exit, new APIFunction());
RegisterFunction(Constants.sched_hiprio, new APIFunction());
RegisterFunction(Constants.pwrctrl_periph_disable_msk_check, new APIFunction());
RegisterFunction(Constants.WriteFrame, new APIFunction());
RegisterFunction(Constants.shell_init, new APIFunction());
RegisterFunction(Constants.reConfigAddressBytes, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_exceptions_1, new APIFunction());
RegisterFunction(Constants.ReadFrame, new APIFunction());
RegisterFunction(Constants.am_gpio0_203f_isr, new APIFunction());
RegisterFunction(Constants.shell_display, new APIFunction());
RegisterFunction(Constants.am_iomaster5_isr, new APIFunction());
RegisterFunction(Constants.__rt_lib_shutdown, new APIFunction());
RegisterFunction(Constants.__decompress1, new APIFunction());
RegisterFunction(Constants.am_pdm1_isr, new APIFunction());
RegisterFunction(Constants.am_bsp_mspi_pins_enable, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_lc_numeric_1, new APIFunction());
RegisterFunction(Constants.build_dma_cmdlist, new APIFunction());
RegisterFunction(Constants.am_hal_mspi_interrupt_enable, new APIFunction());
RegisterFunction(Constants.som_RegRead, new APIFunction());
RegisterFunction(Constants.putchar_custom, new APIFunction());
RegisterFunction(Constants.__aeabi_memclr4, new APIFunction());
RegisterFunction(Constants._chval, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_atexit_1, new APIFunction());
RegisterFunction(Constants.am_device_mspi_som_enter_regReadMode, new APIFunction());
RegisterFunction(Constants.shell_tab_key_process, new APIFunction());
RegisterFunction(Constants.am_hal_delay_us_status_check, new APIFunction());
RegisterFunction(Constants.__rt_memcpy, new APIFunction());
RegisterFunction(Constants.am_devices_mspi_som_readUID, new APIFunction());
RegisterFunction(Constants.am_hal_uart_fifo_read, new APIFunction());
RegisterFunction(Constants.am_timer08_isr, new APIFunction());
RegisterFunction(Constants.param_parse, new APIFunction());
RegisterFunction(Constants.__rt_lib_shutdown_signal_1, new APIFunction());
RegisterFunction(Constants.blocking_read, new APIFunction());
RegisterFunction(Constants.am_get_pwrctrl, new APIFunction());
RegisterFunction(Constants.program_dma, new APIFunction());
RegisterFunction(Constants.ndigits_in_hex, new APIFunction());
RegisterFunction(Constants.__aeabi_memcpy4, new APIFunction());
RegisterFunction(Constants.ReadEntryCode, new APIFunction());
RegisterFunction(Constants.config_baudrate, new APIFunction());
RegisterFunction(Constants.am_pdm0_isr, new APIFunction());
RegisterFunction(Constants.UsageFault_Handler, new APIFunction());
RegisterFunction(Constants.nonblocking_write, new APIFunction());
RegisterFunction(Constants.mspi_cq_enable, new APIFunction());
RegisterFunction(Constants.am_timer02_isr, new APIFunction());
RegisterFunction(Constants.WriteOneFrame, new APIFunction());
RegisterFunction(Constants.am_gpio1_405f_isr, new APIFunction());
RegisterFunction(Constants.am_iomaster0_isr, new APIFunction());
RegisterFunction(Constants.am_devices_mspi_som_ddr_read, new APIFunction());
RegisterFunction(Constants.am_ioslave_acc_isr, new APIFunction());
RegisterFunction(Constants.som_device_system_init, new APIFunction());
RegisterFunction(Constants.am_timer12_isr, new APIFunction());
RegisterFunction(Constants.__rt_lib_init_lc_monetary_1, new APIFunction());

        }

        void ReadConfig()
        {
            MAX_LOOPS = ReadConfig("maxLoops", 256000);
#if UNITY_EDITOR == false && UNITY_STANDALONE == false && __ANDROID__ == false && __IOS__ == false
            if (ConfigurationManager.GetSection("Languages") == null)
            {
                return;
            }
            var languagesSection = ConfigurationManager.GetSection("Languages") as NameValueCollection;
            if (languagesSection.Count == 0)
            {
                return;
            }

            string errorsPath = ConfigurationManager.AppSettings["errorsPath"];
            Translation.Language = ConfigurationManager.AppSettings["language"];
            Translation.LoadErrors(errorsPath);

            string dictPath = ConfigurationManager.AppSettings["dictionaryPath"];

            string baseLanguage = Constants.ENGLISH;
            string languages = languagesSection["languages"];
            string[] supportedLanguages = languages.Split(",".ToCharArray());

            foreach (string lang in supportedLanguages)
            {
                string language = Constants.Language(lang);
                Dictionary<string, string> tr1 = Translation.KeywordsDictionary(baseLanguage, language);
                Dictionary<string, string> tr2 = Translation.KeywordsDictionary(language, baseLanguage);

                Translation.TryLoadDictionary(dictPath, baseLanguage, language);

                var languageSection = ConfigurationManager.GetSection(lang) as NameValueCollection;

                Translation.Add(languageSection, Constants.IF, tr1, tr2);
                Translation.Add(languageSection, Constants.FOR, tr1, tr2);
                Translation.Add(languageSection, Constants.WHILE, tr1, tr2);
                Translation.Add(languageSection, Constants.BREAK, tr1, tr2);
                Translation.Add(languageSection, Constants.CONTINUE, tr1, tr2);
                Translation.Add(languageSection, Constants.RETURN, tr1, tr2);
                Translation.Add(languageSection, Constants.FUNCTION, tr1, tr2);
                Translation.Add(languageSection, Constants.INCLUDE, tr1, tr2);
                Translation.Add(languageSection, Constants.THROW, tr1, tr2);
                Translation.Add(languageSection, Constants.TRY, tr1, tr2);
                Translation.Add(languageSection, Constants.TYPE, tr1, tr2);
                Translation.Add(languageSection, Constants.TRUE, tr1, tr2);
                Translation.Add(languageSection, Constants.FALSE, tr1, tr2);

                Translation.Add(languageSection, Constants.ADD, tr1, tr2);
                Translation.Add(languageSection, Constants.ADD_TO_HASH, tr1, tr2);
                Translation.Add(languageSection, Constants.ADD_ALL_TO_HASH, tr1, tr2);
                Translation.Add(languageSection, Constants.APPEND, tr1, tr2);
                Translation.Add(languageSection, Constants.APPENDLINE, tr1, tr2);
                Translation.Add(languageSection, Constants.APPENDLINES, tr1, tr2);
                Translation.Add(languageSection, Constants.OpenJlink, tr1, tr2);
                Translation.Add(languageSection, Constants.Reset, tr1, tr2);
                
                Translation.Add(languageSection, Constants.ArrayToString, tr1, tr2);
                Translation.Add(languageSection, Constants.JlinkOpReadU8, tr1, tr2);
                Translation.Add(languageSection, Constants.JlinkOpReadU32, tr1, tr2);
                Translation.Add(languageSection, Constants.JlinkOpWriteU8, tr1, tr2);
                Translation.Add(languageSection, Constants.JlinkOpWriteU32, tr1, tr2);
               
                Translation.Add(languageSection, Constants.InitJlinkProctol, tr1, tr2);
                
                Translation.Add(languageSection, Constants.OpenFile, tr1, tr2);
                Translation.Add(languageSection, Constants.GetFile, tr1, tr2);
                Translation.Add(languageSection, Constants.FileWrite, tr1, tr2);
                Translation.Add(languageSection, Constants.FileRead, tr1, tr2);
                Translation.Add(languageSection, Constants.FileReadAllLine, tr1, tr2);
                Translation.Add(languageSection, Constants.ReadMultmeter, tr1, tr2);
                //Translation.Add(languageSection, Constants.InitInterface, tr1, tr2);
                //Translation.Add(languageSection, Constants.som_xspi_reg_write, tr1, tr2);
                //Translation.Add(languageSection, Constants.som_xspi_reg_read, tr1, tr2);
                //Translation.Add(languageSection, Constants.som_xspi_reg_reram_write, tr1, tr2);
                //Translation.Add(languageSection, Constants.som_xspi_reg_reram_read, tr1, tr2);
                //Translation.Add(languageSection, Constants.som_xspi_reram_write, tr1, tr2);
                //Translation.Add(languageSection, Constants.som_xspi_reram_read, tr1, tr2);
                //Translation.Add(languageSection, Constants.som_common_test, tr1, tr2);
                Translation.Add(languageSection, Constants.JlinkOpReadU8, tr1, tr2);
                Translation.Add(languageSection, Constants.Wilf, tr1, tr2);
                Translation.Add(languageSection, Constants.GetRandom, tr1, tr2);
                Translation.Add(languageSection, Constants.CallAPI, tr1, tr2);
                Translation.Add(languageSection, Constants.CD, tr1, tr2);
                Translation.Add(languageSection, Constants.CD__, tr1, tr2);
                Translation.Add(languageSection, Constants.CONSOLE_CLR, tr1, tr2);
                Translation.Add(languageSection, Constants.CONTAINS, tr1, tr2);
                Translation.Add(languageSection, Constants.COPY, tr1, tr2);
                Translation.Add(languageSection, Constants.DEEP_COPY, tr1, tr2);
                Translation.Add(languageSection, Constants.DELETE, tr1, tr2);
                Translation.Add(languageSection, Constants.DIR, tr1, tr2);
                Translation.Add(languageSection, Constants.ENV, tr1, tr2);
                Translation.Add(languageSection, Constants.EXIT, tr1, tr2);
                Translation.Add(languageSection, Constants.EXISTS, tr1, tr2);
                Translation.Add(languageSection, Constants.FINDFILES, tr1, tr2);
                Translation.Add(languageSection, Constants.FINDSTR, tr1, tr2);
                Translation.Add(languageSection, Constants.GET_COLUMN, tr1, tr2);
                Translation.Add(languageSection, Constants.GET_KEYS, tr1, tr2);
                Translation.Add(languageSection, Constants.KILL, tr1, tr2);
                Translation.Add(languageSection, Constants.LOCK, tr1, tr2);
                Translation.Add(languageSection, Constants.MKDIR, tr1, tr2);
                Translation.Add(languageSection, Constants.MORE, tr1, tr2);
                Translation.Add(languageSection, Constants.MOVE, tr1, tr2);
                Translation.Add(languageSection, Constants.NOW, tr1, tr2);
                Translation.Add(languageSection, Constants.PRINT, tr1, tr2);
                Translation.Add(languageSection, Constants.PRINT, tr1, tr2);
                Translation.Add(languageSection, Constants.PRINT_BLACK, tr1, tr2);
                Translation.Add(languageSection, Constants.PRINT_GRAY, tr1, tr2);
                Translation.Add(languageSection, Constants.PRINT_GREEN, tr1, tr2);
                Translation.Add(languageSection, Constants.PRINT_RED, tr1, tr2);
                Translation.Add(languageSection, Constants.PSINFO, tr1, tr2);
                Translation.Add(languageSection, Constants.PWD, tr1, tr2);
                Translation.Add(languageSection, Constants.READ, tr1, tr2);
                Translation.Add(languageSection, Constants.READFILE, tr1, tr2);
                Translation.Add(languageSection, Constants.READNUMBER, tr1, tr2);
                Translation.Add(languageSection, Constants.REMOVE, tr1, tr2);
                Translation.Add(languageSection, Constants.REMOVE_AT, tr1, tr2);
                Translation.Add(languageSection, Constants.RUN, tr1, tr2);
                Translation.Add(languageSection, Constants.SETENV, tr1, tr2);
                Translation.Add(languageSection, Constants.SHOW, tr1, tr2);
                Translation.Add(languageSection, Constants.SIGNAL, tr1, tr2);
                Translation.Add(languageSection, Constants.SIZE, tr1, tr2);
                Translation.Add(languageSection, Constants.SLEEP, tr1, tr2);
                Translation.Add(languageSection, Constants.STOPWATCH_ELAPSED, tr1, tr2);
                Translation.Add(languageSection, Constants.STOPWATCH_START, tr1, tr2);
                Translation.Add(languageSection, Constants.STOPWATCH_STOP, tr1, tr2);
                Translation.Add(languageSection, Constants.STR_BETWEEN, tr1, tr2);
                Translation.Add(languageSection, Constants.STR_BETWEEN_ANY, tr1, tr2);
                Translation.Add(languageSection, Constants.STR_CONTAINS, tr1, tr2);
                Translation.Add(languageSection, Constants.STR_ENDS_WITH, tr1, tr2);
                Translation.Add(languageSection, Constants.STR_EQUALS, tr1, tr2);
                Translation.Add(languageSection, Constants.STR_INDEX_OF, tr1, tr2);
                Translation.Add(languageSection, Constants.STR_LOWER, tr1, tr2);
                Translation.Add(languageSection, Constants.STR_REPLACE, tr1, tr2);
                Translation.Add(languageSection, Constants.STR_STARTS_WITH, tr1, tr2);
                Translation.Add(languageSection, Constants.STR_SUBSTR, tr1, tr2);
                Translation.Add(languageSection, Constants.STR_TRIM, tr1, tr2);
                Translation.Add(languageSection, Constants.STR_UPPER, tr1, tr2);
                Translation.Add(languageSection, Constants.TAIL, tr1, tr2);
                Translation.Add(languageSection, Constants.THREAD, tr1, tr2);
                Translation.Add(languageSection, Constants.THREAD_ID, tr1, tr2);
                Translation.Add(languageSection, Constants.TIMESTAMP, tr1, tr2);
                Translation.Add(languageSection, Constants.TOKENIZE, tr1, tr2);
                Translation.Add(languageSection, Constants.TOKENIZE_LINES, tr1, tr2);
                Translation.Add(languageSection, Constants.TOKEN_COUNTER, tr1, tr2);
                Translation.Add(languageSection, Constants.TO_BOOL, tr1, tr2);
                Translation.Add(languageSection, Constants.TO_DECIMAL, tr1, tr2);
                Translation.Add(languageSection, Constants.TO_DOUBLE, tr1, tr2);
                Translation.Add(languageSection, Constants.TO_INT, tr1, tr2);
                Translation.Add(languageSection, Constants.TO_STRING, tr1, tr2);
                Translation.Add(languageSection, Constants.TRANSLATE, tr1, tr2);
                Translation.Add(languageSection, Constants.WAIT, tr1, tr2);
                Translation.Add(languageSection, Constants.WRITE, tr1, tr2);
                Translation.Add(languageSection, Constants.WRITELINE, tr1, tr2);
                Translation.Add(languageSection, Constants.WRITELINES, tr1, tr2);
                Translation.Add(languageSection, Constants.WRITE_CONSOLE, tr1, tr2);


                Translation.Add(languageSection, Constants.__semihosting_library_function, tr1, tr2);
                Translation.Add(languageSection, Constants.GetCrc32, tr1, tr2);
                Translation.Add(languageSection, Constants.exit, tr1, tr2);
                Translation.Add(languageSection, Constants.SysTick_Handler, tr1, tr2);
                Translation.Add(languageSection, Constants.__scatterload_zeroinit, tr1, tr2);
                Translation.Add(languageSection, Constants.__use_two_region_memory, tr1, tr2);
                Translation.Add(languageSection, Constants.am_adc_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_stimer_cmpr6_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_interrupt_status_get, tr1, tr2);
                Translation.Add(languageSection, Constants.myShellWrite, tr1, tr2);
                Translation.Add(languageSection, Constants.som_xspi_mem_write, tr1, tr2);
                Translation.Add(languageSection, Constants.socInit, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_cmdq_init, tr1, tr2);
                Translation.Add(languageSection, Constants.BusFault_Handler, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_gpio_state_write, tr1, tr2);
                Translation.Add(languageSection, Constants.DebugMon_Handler, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_user_alloc_1, tr1, tr2);
                Translation.Add(languageSection, Constants.am_iomaster3_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_device_mspi_som_reg_read, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer09_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_iomaster6_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_device_command_read, tr1, tr2);
                Translation.Add(languageSection, Constants.SVC_Handler, tr1, tr2);
                Translation.Add(languageSection, Constants.JlinkInit, tr1, tr2);
                Translation.Add(languageSection, Constants.daxi_flush_complete, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_initialize, tr1, tr2);
                Translation.Add(languageSection, Constants.crypto_quiesce, tr1, tr2);
                Translation.Add(languageSection, Constants.mspi_device_configure, tr1, tr2);
                Translation.Add(languageSection, Constants.am_dspi2s1_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.__fplib_config_fpu_vfp, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer06_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_dspi2s2_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.strcmp, tr1, tr2);
                Translation.Add(languageSection, Constants.shellDisplayByte, tr1, tr2);
                Translation.Add(languageSection, Constants.som_module_init, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_lc_common, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_shutdown_user_alloc_1, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_shutdown_fp_trap_1, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_show_help, tr1, tr2);
                Translation.Add(languageSection, Constants.am_uart_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.strlen, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_clear, tr1, tr2);
                Translation.Add(languageSection, Constants.__scatterload_null, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer00_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_interrupt_clear, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_entry_presh_1, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_pwrctrl_periph_disable, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_display_item, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_cachectrl_config, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_alloca_1, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer10_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.uint64_to_str, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_gpio_pinconfig, tr1, tr2);
                Translation.Add(languageSection, Constants.am_pdm3_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_clear_line, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_control, tr1, tr2);
                Translation.Add(languageSection, Constants._memcpy_lastbytes_aligned, tr1, tr2);
                Translation.Add(languageSection, Constants.__use_no_semihosting_swi, tr1, tr2);
                Translation.Add(languageSection, Constants.mspi_fifo_write, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_power_control, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_clock_1, tr1, tr2);
                Translation.Add(languageSection, Constants.ndigits_in_i64, tr1, tr2);
                Translation.Add(languageSection, Constants.am_dspi2s3_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.NMI_Handler, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_lc_ctype_1, tr1, tr2);
                Translation.Add(languageSection, Constants.__aeabi_memclr8, tr1, tr2);
                Translation.Add(languageSection, Constants.am_mspi1_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_interrupt_master_set, tr1, tr2);
                Translation.Add(languageSection, Constants.som_write, tr1, tr2);
                Translation.Add(languageSection, Constants.am_gpu_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_handler, tr1, tr2);
                Translation.Add(languageSection, Constants.am_devices_mspi_som_deinit, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_delay_us_status_change, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_entry_postli_1, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer04_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.mspi_cq_term, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_cmdq_get_status, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_interrupt_disable, tr1, tr2);
                Translation.Add(languageSection, Constants.som_readUID, tr1, tr2);
                Translation.Add(languageSection, Constants.__fpl_fretinf, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_normal, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_shutdown_return, tr1, tr2);
                Translation.Add(languageSection, Constants.am_gpio1_203f_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.rx_queue_update, tr1, tr2);
                Translation.Add(languageSection, Constants.mspi_add_hp_transaction, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_uart_power_control, tr1, tr2);
                Translation.Add(languageSection, Constants.__aeabi_memclr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_gpio0_607f_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_entry_li, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_backspace_key_process, tr1, tr2);
                Translation.Add(languageSection, Constants.mspi_cq_disable, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer01_isr, tr1, tr2);
                Translation.Add(languageSection, Constants._d2f, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_cmdq_term, tr1, tr2);
                Translation.Add(languageSection, Constants.uint64_to_hexstr, tr1, tr2);
                Translation.Add(languageSection, Constants.tx_queue_update, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_deinitialize, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer11_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_stimer_cmpr4_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_enable, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_shutdown_cpp_1, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_fp_1, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_interrupt_service, tr1, tr2);
                Translation.Add(languageSection, Constants.am_stimer_cmpr0_isr, tr1, tr2);
                Translation.Add(languageSection, Constants._fp_init, tr1, tr2);
                Translation.Add(languageSection, Constants.divu64_10, tr1, tr2);
                Translation.Add(languageSection, Constants.ndigits_in_u64, tr1, tr2);
                Translation.Add(languageSection, Constants.sys_init, tr1, tr2);
                Translation.Add(languageSection, Constants.decstr_to_int, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_stdio_1, tr1, tr2);
                Translation.Add(languageSection, Constants.nonblocking_read, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_lc_collate_1, tr1, tr2);
                Translation.Add(languageSection, Constants.som_xspi_reg_write, tr1, tr2);
                Translation.Add(languageSection, Constants.am_devices_mspi_som_init, tr1, tr2);
                Translation.Add(languageSection, Constants.__aeabi_d2f, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_exit_ls, tr1, tr2);
                Translation.Add(languageSection, Constants.som_xspi_mem_read_xip, tr1, tr2);
                Translation.Add(languageSection, Constants.am_disp_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_entry, tr1, tr2);
                Translation.Add(languageSection, Constants.am_default_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.mspi_fifo_read, tr1, tr2);
                Translation.Add(languageSection, Constants.am_uart1_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_getenv_1, tr1, tr2);
                Translation.Add(languageSection, Constants.am_device_command_write, tr1, tr2);
                Translation.Add(languageSection, Constants.som_xspi_resetCtrl, tr1, tr2);
                Translation.Add(languageSection, Constants.__scatterload_copy, tr1, tr2);
                Translation.Add(languageSection, Constants.am_sdio_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.ResetCrc32, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_fp_trap_1, tr1, tr2);
                Translation.Add(languageSection, Constants.simple_strlen, tr1, tr2);
                Translation.Add(languageSection, Constants.am_audadc0_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_interrupt_master_enable, tr1, tr2);
                Translation.Add(languageSection, Constants.am_gpio0_001f_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.main, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_history_add, tr1, tr2);
                Translation.Add(languageSection, Constants.main_shell, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_get_current, tr1, tr2);
                Translation.Add(languageSection, Constants.am_iomaster4_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_enter_key_process, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_heap_1, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer05_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_dsi_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_return, tr1, tr2);
                Translation.Add(languageSection, Constants.som_module_init_test, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_task, tr1, tr2);
                Translation.Add(languageSection, Constants.FillFrame, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_blocking_transfer, tr1, tr2);
                Translation.Add(languageSection, Constants.__scatterload_rt2, tr1, tr2);
                Translation.Add(languageSection, Constants.am_device_mspi_som_reg_write, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_pwrctrl_periph_enable, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer13_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.blocking_write, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_fault_status_get, tr1, tr2);
                Translation.Add(languageSection, Constants.am_bsp_mspi1_mux_flash_enable, tr1, tr2);
                Translation.Add(languageSection, Constants.am_cachecpu_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.reConfigTurnaround, tr1, tr2);
                Translation.Add(languageSection, Constants.__main, tr1, tr2);
                Translation.Add(languageSection, Constants.am_ctimer_isr, tr1, tr2);
                Translation.Add(languageSection, Constants._rand_init, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_fault_capture_enable, tr1, tr2);
                Translation.Add(languageSection, Constants.__user_perthread_libspace, tr1, tr2);
                Translation.Add(languageSection, Constants.som_memoryOT, tr1, tr2);
                Translation.Add(languageSection, Constants.am_bsp_mspi1_mux_psram_enable, tr1, tr2);
                Translation.Add(languageSection, Constants.atoi, tr1, tr2);
                Translation.Add(languageSection, Constants.__decompress, tr1, tr2);
                Translation.Add(languageSection, Constants.am_stimer_cmpr2_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_cachectrl_enable, tr1, tr2);
                Translation.Add(languageSection, Constants.am_stimer_cmpr7_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_memclr_w, tr1, tr2);
                Translation.Add(languageSection, Constants.am_util_stdio_vsprintf, tr1, tr2);
                Translation.Add(languageSection, Constants.am_devices_mspi_som_ddr_disable_xip, tr1, tr2);
                Translation.Add(languageSection, Constants.am_usb_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_stimer_cmpr5_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_configure, tr1, tr2);
                Translation.Add(languageSection, Constants.am_devices_mspi_som_softReset, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_init_fn, tr1, tr2);
                Translation.Add(languageSection, Constants.som_read_by_xip, tr1, tr2);
                Translation.Add(languageSection, Constants.write_transaction_save, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_string_copy, tr1, tr2);
                Translation.Add(languageSection, Constants._strtoul, tr1, tr2);
                Translation.Add(languageSection, Constants.__user_initial_stackheap, tr1, tr2);
                Translation.Add(languageSection, Constants._memcpy_lastbytes, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_memcpy_w, tr1, tr2);
                Translation.Add(languageSection, Constants.Reset_Handler, tr1, tr2);
                Translation.Add(languageSection, Constants.mspi_dummy_callback, tr1, tr2);
                Translation.Add(languageSection, Constants.__scatterload, tr1, tr2);
                Translation.Add(languageSection, Constants.am_cryptosec_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_string_compare, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_history_process, tr1, tr2);
                Translation.Add(languageSection, Constants.am_dspi2s0_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_util_stdio_terminal_clear, tr1, tr2);
                Translation.Add(languageSection, Constants.am_watchdog_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_cmdq_post_loop_block, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_rand_2, tr1, tr2);
                Translation.Add(languageSection, Constants.nonblocking_read_sm, tr1, tr2);
                Translation.Add(languageSection, Constants.am_util_delay_ms, tr1, tr2);
                Translation.Add(languageSection, Constants.main_jlink, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_help, tr1, tr2);
                Translation.Add(languageSection, Constants.param_parser, tr1, tr2);
                Translation.Add(languageSection, Constants.som_xspi_init, tr1, tr2);
                Translation.Add(languageSection, Constants.am_bsp_uart_string_print, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_entry_main, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_signal_1, tr1, tr2);
                Translation.Add(languageSection, Constants.__aeabi_memcpy8, tr1, tr2);
                Translation.Add(languageSection, Constants.am_rtc_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_ansi_process, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_ansi_enter, tr1, tr2);
                Translation.Add(languageSection, Constants.som_RegWrite, tr1, tr2);
                Translation.Add(languageSection, Constants.getchar_custom, tr1, tr2);
                Translation.Add(languageSection, Constants.am_gpio1_607f_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.daxi_flush_invalidate, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_lc_ctype_2, tr1, tr2);
                Translation.Add(languageSection, Constants.strtoul, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_entry_postsh_1, tr1, tr2);
                Translation.Add(languageSection, Constants.memcmp, tr1, tr2);
                Translation.Add(languageSection, Constants.__aeabi_memcpy, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_uart_fifo_write, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_uart_initialize, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_exit, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_disable, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_display_command_help, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_locale, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer15_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_queue_item_get, tr1, tr2);
                Translation.Add(languageSection, Constants.som_xspi_reg_read, tr1, tr2);
                Translation.Add(languageSection, Constants.padbuffer, tr1, tr2);
                Translation.Add(languageSection, Constants.am_uart2_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_cmdq_release_block, tr1, tr2);
                Translation.Add(languageSection, Constants.rand, tr1, tr2);
                Translation.Add(languageSection, Constants.am_devices_mspi_som_reset, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_interrupt_master_disable, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_cpp_1, tr1, tr2);
                Translation.Add(languageSection, Constants.am_devices_mspi_som_ddr_write, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_cmdq_error_resume, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_shutdown_heap_1, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_daxi_config, tr1, tr2);
                Translation.Add(languageSection, Constants.am_util_stdio_printf, tr1, tr2);
                Translation.Add(languageSection, Constants.__scatterload_rt2_thumb_only, tr1, tr2);
                Translation.Add(languageSection, Constants.som_read, tr1, tr2);
                Translation.Add(languageSection, Constants.__fplib_config_pureend_doubles, tr1, tr2);
                Translation.Add(languageSection, Constants.ProgramFlashPro, tr1, tr2);
                Translation.Add(languageSection, Constants.am_uart3_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.update_indices, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_queue_item_add, tr1, tr2);
                Translation.Add(languageSection, Constants.am_ioslave_ios_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.som_nonblocking_transfer, tr1, tr2);
                Translation.Add(languageSection, Constants.am_iomaster1_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_daxi_control, tr1, tr2);
                Translation.Add(languageSection, Constants.getStackedReg, tr1, tr2);
                Translation.Add(languageSection, Constants.am_brownout_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_gpio0_405f_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.PendSV_Handler, tr1, tr2);
                Translation.Add(languageSection, Constants.__user_setup_stackheap, tr1, tr2);
                Translation.Add(languageSection, Constants.am_gpio1_001f_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_exit_exit, tr1, tr2);
                Translation.Add(languageSection, Constants.crypto_boost_trims, tr1, tr2);
                Translation.Add(languageSection, Constants.mspi_piomixed_configure, tr1, tr2);
                Translation.Add(languageSection, Constants.am_clkgen_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_iomaster2_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_lc_time_1, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_delay_us, tr1, tr2);
                Translation.Add(languageSection, Constants.mspi_cq_add_transaction, tr1, tr2);
                Translation.Add(languageSection, Constants.__aeabi_errno_addr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_util_delay_us, tr1, tr2);
                Translation.Add(languageSection, Constants.am_stimer_cmpr3_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_util_stdio_printf_init, tr1, tr2);
                Translation.Add(languageSection, Constants.am_device_mspi_som_exit_regReadMode, tr1, tr2);
                Translation.Add(languageSection, Constants.MemoryPro, tr1, tr2);
                Translation.Add(languageSection, Constants.am_iomaster7_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_stimer_cmpr1_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_nonblocking_transfer, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_add, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer03_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.som_xspi_mem_read, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer14_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_cmdq_reset, tr1, tr2);
                Translation.Add(languageSection, Constants.am_pdm2_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.som_common_test, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_device_configure, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_rand_1, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_exit_prels_1, tr1, tr2);
                Translation.Add(languageSection, Constants.strncpy, tr1, tr2);
                Translation.Add(languageSection, Constants.pfnMSPI_SOM_DDR_Callback, tr1, tr2);
                Translation.Add(languageSection, Constants.am_mspi2_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.som_init, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_shutdown_stdio_1, tr1, tr2);
                Translation.Add(languageSection, Constants.nonblocking_write_sm, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_uart_transfer, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_uart_interrupt_clear, tr1, tr2);
                Translation.Add(languageSection, Constants.am_stimerof_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.init_process, tr1, tr2);
                Translation.Add(languageSection, Constants.__user_perproc_libspace, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_memclr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_uart_configure, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mram_main_program, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_cmdq_post_block, tr1, tr2);
                Translation.Add(languageSection, Constants.ftoa, tr1, tr2);
                Translation.Add(languageSection, Constants.som_xspi_uid_read, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_get_subcmd_number, tr1, tr2);
                Translation.Add(languageSection, Constants.HardFault_Handler, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_cmdq_disable, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_argv_1, tr1, tr2);
                Translation.Add(languageSection, Constants.som_reset, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_delete, tr1, tr2);
                Translation.Add(languageSection, Constants.mspi_seq_loopback, tr1, tr2);
                Translation.Add(languageSection, Constants.am_util_faultisr_collect_data, tr1, tr2);
                Translation.Add(languageSection, Constants._get_lc_ctype, tr1, tr2);
                Translation.Add(languageSection, Constants.myShellRead, tr1, tr2);
                Translation.Add(languageSection, Constants.am_vcomp_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.Crc32InitTable, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mram_main_words_program, tr1, tr2);
                Translation.Add(languageSection, Constants.read_transaction_save, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_cmdq_enable, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_highprio_transfer, tr1, tr2);
                Translation.Add(languageSection, Constants.am_mspi0_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_bsp_uart_printf_enable, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer07_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.mspi_cq_init, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_preinit_1, tr1, tr2);
                Translation.Add(languageSection, Constants.ExeTestCase, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_ctype_table, tr1, tr2);
                Translation.Add(languageSection, Constants.mspi_cq_pause, tr1, tr2);
                Translation.Add(languageSection, Constants._memset, tr1, tr2);
                Translation.Add(languageSection, Constants._memset_w, tr1, tr2);
                Translation.Add(languageSection, Constants.am_devices_mspi_som_ddr_enable_xip, tr1, tr2);
                Translation.Add(languageSection, Constants.__fpl_dnaninf, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_cmdq_alloc_block, tr1, tr2);
                Translation.Add(languageSection, Constants.__user_libspace, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_entry_sh, tr1, tr2);
                Translation.Add(languageSection, Constants.get_pause_val, tr1, tr2);
                Translation.Add(languageSection, Constants.MemManage_Handler, tr1, tr2);
                Translation.Add(languageSection, Constants.strtol, tr1, tr2);
                Translation.Add(languageSection, Constants.srand, tr1, tr2);
                Translation.Add(languageSection, Constants._sys_exit, tr1, tr2);
                Translation.Add(languageSection, Constants.sched_hiprio, tr1, tr2);
                Translation.Add(languageSection, Constants.pwrctrl_periph_disable_msk_check, tr1, tr2);
                Translation.Add(languageSection, Constants.WriteFrame, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_init, tr1, tr2);
                Translation.Add(languageSection, Constants.reConfigAddressBytes, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_exceptions_1, tr1, tr2);
                Translation.Add(languageSection, Constants.ReadFrame, tr1, tr2);
                Translation.Add(languageSection, Constants.am_gpio0_203f_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_display, tr1, tr2);
                Translation.Add(languageSection, Constants.am_iomaster5_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_shutdown, tr1, tr2);
                Translation.Add(languageSection, Constants.__decompress1, tr1, tr2);
                Translation.Add(languageSection, Constants.am_pdm1_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_bsp_mspi_pins_enable, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_lc_numeric_1, tr1, tr2);
                Translation.Add(languageSection, Constants.build_dma_cmdlist, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_mspi_interrupt_enable, tr1, tr2);
                Translation.Add(languageSection, Constants.som_RegRead, tr1, tr2);
                Translation.Add(languageSection, Constants.putchar_custom, tr1, tr2);
                Translation.Add(languageSection, Constants.__aeabi_memclr4, tr1, tr2);
                Translation.Add(languageSection, Constants._chval, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_atexit_1, tr1, tr2);
                Translation.Add(languageSection, Constants.am_device_mspi_som_enter_regReadMode, tr1, tr2);
                Translation.Add(languageSection, Constants.shell_tab_key_process, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_delay_us_status_check, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_memcpy, tr1, tr2);
                Translation.Add(languageSection, Constants.am_devices_mspi_som_readUID, tr1, tr2);
                Translation.Add(languageSection, Constants.am_hal_uart_fifo_read, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer08_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.param_parse, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_shutdown_signal_1, tr1, tr2);
                Translation.Add(languageSection, Constants.blocking_read, tr1, tr2);
                Translation.Add(languageSection, Constants.am_get_pwrctrl, tr1, tr2);
                Translation.Add(languageSection, Constants.program_dma, tr1, tr2);
                Translation.Add(languageSection, Constants.ndigits_in_hex, tr1, tr2);
                Translation.Add(languageSection, Constants.__aeabi_memcpy4, tr1, tr2);
                Translation.Add(languageSection, Constants.ReadEntryCode, tr1, tr2);
                Translation.Add(languageSection, Constants.config_baudrate, tr1, tr2);
                Translation.Add(languageSection, Constants.am_pdm0_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.UsageFault_Handler, tr1, tr2);
                Translation.Add(languageSection, Constants.nonblocking_write, tr1, tr2);
                Translation.Add(languageSection, Constants.mspi_cq_enable, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer02_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.WriteOneFrame, tr1, tr2);
                Translation.Add(languageSection, Constants.am_gpio1_405f_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_iomaster0_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.am_devices_mspi_som_ddr_read, tr1, tr2);
                Translation.Add(languageSection, Constants.am_ioslave_acc_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.som_device_system_init, tr1, tr2);
                Translation.Add(languageSection, Constants.am_timer12_isr, tr1, tr2);
                Translation.Add(languageSection, Constants.__rt_lib_init_lc_monetary_1, tr1, tr2);



            }
#endif
        }

        public int ReadConfig(string configName, int defaultValue = 0)
        {
            int value = defaultValue;
#if UNITY_EDITOR == false && UNITY_STANDALONE == false && __ANDROID__ == false && __IOS__ == false
            string config = ConfigurationManager.AppSettings[configName];
            if (string.IsNullOrWhiteSpace(config) || !Int32.TryParse(config, out value))
            {
                return defaultValue;
            }
#endif
            return value;
        }
   }
}
